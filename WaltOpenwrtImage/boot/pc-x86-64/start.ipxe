#!ipxe
set node_model pc-x86-64
# This is provided by iPXE, extracted from BIOS information.
set node_submodel ${manufacturer}/${product}
echo Walt node model: ${node_model}
echo Walt node submodel: ${node_submodel}

# Compute url for kernel, initrd, and custom ipxe scripts
set kernel_url /${node_submodel}/kernel
set kernel_fallback_url /kernel
set initrd_url /${node_submodel}/initrd
set initrd_fallback_url /initrd
set ipxe_script /boot-params.ipxe
set ipxe_script_submodel /${node_submodel}/boot-params.ipxe

# Default value for variables (may be overriden by custom ipxe script)
set walt_init /bin/walt-init
# Interface name within the booted OS on which netconsole should send logs
set netconsole_iface eth0
# Custom kernel parameters directly passed to the kernel command line (useful for serial console)
set additional_kernel_params
# Server mac address (useful for netconsole)
set server_mac

# Load server info (mac address) stored as an ipxe script
echo Loading server ipxe script for server conf vars
# note: without imgfree, later boot stages may fail
chain /server-params.ipxe && imgfree server-params.ipxe ||

# Load custom ipxe scripts: model, then submodel.
echo Loading custom ipxe scripts from Walt image
# imgfree is necessary, otherwise the loaded ipxe script corrupts the memory of the initrd.
chain /boot-params.ipxe && imgfree boot-params.ipxe ||
chain /${node_submodel}/boot-params.ipxe && imgfree boot-params.ipxe ||

# Compute kernel command line args
set nfs_root ${next-server}:/var/lib/walt/nodes/${mac}/fs

# Specifying the NFS version is necessary for initrd-less images: the
# kernel defaults to NFS version 2 and somehow panics even before
# running init. Images with initrd work fine because they negotiate the
# version with the server, starting with NFSv4.
# We would normally use "nfsvers=3" here, but this is not understood
# by Debian's initrd (nfsmount from klibc).  So, use the old "v3"
# syntax, which is understood both by the kernel (for initrd-less
# images) and by Debian's initrd.
set nfs_bootargs root=/dev/nfs nfsroot=${nfs_root},v3

set walt_bootargs walt.node.model=${node_model} walt.server.ip=${next-server}

# For now, Walt's logging module (NetconsoleListener) does not know
# how to decode the extended format from netconsole. We should enable
# the extended format ("netconsole=+1234...") when this is the case,
# because it will allow proper handling of continuation lines.
# References:
# https://www.kernel.org/doc/Documentation/networking/netconsole.txt
# https://www.kernel.org/doc/Documentation/ABI/testing/dev-kmsg
set console_bootargs netconsole=1234@${ip}/${netconsole_iface},12342@${next-server}/${server_mac}

# Since a DHCP request has already been done by the 1st-stage script,
# we could theoretically set the network configuration statically here:
# set ip_conf ip=${ip}:${next-server}:${gateway}:${netmask}:${hostname}::off
# However, this may cause issues if the system has multiple interfaces and
# the image is using an initramfs.
# So let's keep it simple.
set ip_conf ip=dhcp

# BOOTIF is set by pxelinux to the MAC address of the interface used to boot,
# and is understood by Debian's initrd scripts.  Use the same syntax as pxelinux
# to be compatible.
set other_bootargs init=${walt_init} panic=30 ${ip_conf} BOOTIF=01-${mac:hexhyp}

set bootargs ${nfs_bootargs} ${walt_bootargs} ${console_bootargs} ${other_bootargs} ${additional_kernel_params}

echo Loading initrd...
initrd ${initrd_url} || initrd ${initrd_fallback_url} || echo No initrd found

echo Loading kernel...
kernel ${kernel_url} initrd=initrd ${bootargs} || kernel ${kernel_fallback_url} initrd=initrd ${bootargs} || reboot

# boot
echo Booting kernel with parameters: ${bootargs}
boot
